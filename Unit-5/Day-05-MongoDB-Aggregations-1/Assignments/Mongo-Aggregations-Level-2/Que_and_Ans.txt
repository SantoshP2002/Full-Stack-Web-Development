 Que 01 : Write Mongo query to retrieve the documents from the orders where the customer_id is 1.
 Ans: `db.orders.aggregate([{$match:{customer_id:1}}])`

 Que 02 : Write Mongo query to retrieve documents from the products where supplier_id is 3.
 Ans: `db.products.aggregate([{$match: {supplier_id: 2}}])`

 Que 03 : Write Mongo query to retrieve the documents from the orders collection with "status": "shipped" .
 Ans: `db.orders.aggregate({$match: {status: 'shipped'}})`

 Que 04 : Write Mongo query to retrieve the amount and paymentMethod from payments where the paymentMethod is not UPI.
 Ans: ` db.payments.aggregate([{$match: {paymentMethod: {$ne : "UPI"}}}, {$project: {amount: 1, paymentMethod:1, _id:0}}])`

 Que 05: Write Mongo query to retrieve the paymentstatus where the amount is greater than 100.
 Ans: `db.payments.aggregate([{$match: {amount: {$gt : 100}}}, {$project: {paymentstatus: 1, _id: 0}}])`

 Que 06: Write Mongo query to retrieve the shipper_id and price from the order_details where the price is greater than 2000.
 Ans: `db.order_details.aggregate([{$match: {price: {$gt: 2000}}}, {$project: {shipper_id:1, price: 1, _id: 0}}])`

 Que 07 : Write Mongo query to retrieve the customer_id and _id from the orders where the status is not shipped.
 Ans: `db.orders.aggregate([{$match: {status : {$ne : "shipped"}}}, {$project: {customer_id: 1,_id: 1}}])`

 Que 08 : Write Mongo query to retrieve documents from the products where category_id is 1 with out product _id.
 Ans: `db.products.aggregate([{$match: {category_id: 1}}, {$project: {_id: 0}}])`

 Que 09 : Write Mongo query to retrieve name,quantity from the products where price greater than 1500 .
 Ans: `db.products.aggregate([{$match: {price: {$gt: 1500}}}, {$project: {name:1, quantity:1, _id:0}}])`

 Que 10: Write Mongo query to retrieve the name from the shippers where the phone number is 1-800-742-5877.
 Ans: `db.shippers.aggregate([{$match: {phone: '1-800-742-5877'}}, {$project: {_id:0, name: 1}}])`

 Que 11 : Write Mongo query to retrieve the city and phone of the suppliers where the suppliers name is Sony.
 Ans: ` db.suppliers.aggregate([{$match: {name: 'Apple'}}, {$project: {_id: 0, city:1, phone:1}}])`

 Que 12 : Write Mongo query to retrieve the name of the suppliers where the city is Tokyo.
 Ans: `db.suppliers.aggregate([{$match: { city: 'Seoul'}}, {$project: {_id:0,name: 1}}])`

 Que 13 : Write Mongo query to find amount of payment made through "UPI" ?
 Ans: ` db.payments.aggregate([{$match: { paymentMethod: 'UPI'}},{$group: {_id: null, totalAmount: {$sum: "$amount"}}} ,{$project: {totalAmount: 1, _id:0}}])`

 Que 14: Write Mongo query to find buyers city as key name "city" who uses hotmail ?
 Ans: `db.buyers.aggregate([{$match: {email: "john@hotmail.com"}}, {$project: {_id:0, city:1, email:1}}])`

 Que 15 : Use MongoDB aggregation to retrieve the top 5 most recent orders that have been shipped, projecting the order date, status, and total amount.
 Ans: `db.orders.aggregate([{$match: {status: "shipped"}}, {$sort: {order_Date: -1}},{$limit: 5},{$project: {_id:0, order_Data:1, status:1, total:1}}])`

 Que 16: Aggregate the first 3 payments with a "success" status, projecting the payment date, amount, and method.
 Ans: `db.payments.aggregate([{$match: { paymentstatus: 'success'}}, {$sort: { payment_date: 1}}, {$limit: 3}, {$project: {_id:0, amount:1, paymentMethod:1}}])`

 Que 17: Aggregate all pending orders, sort them by the order date in descending order, and project the customer ID, order date, and total amount.
 Ans: `db.orders.aggregate([{$match: {status: 'pending'}}, {$sort: {order_date: -1}}, {$project: {_id:0, customer_id:1, order_date:1, total:1}}])`

 Que 18: Aggregate products, sort them by quantity in descending order, limit the result to the top 10 items, and project the product name and quantity.
 Ans: `db.products.aggregate([{$sort: {quantity: -1}}, {$limit: 10}, {$project: {name:1, quantity:1}}])`
